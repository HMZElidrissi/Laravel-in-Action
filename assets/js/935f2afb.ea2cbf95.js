"use strict";(self.webpackChunklaravel_in_action=self.webpackChunklaravel_in_action||[]).push([[581],{5610:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/Laravel-in-Action/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Overview of Laravel","href":"/Laravel-in-Action/docs/Overview","docId":"Overview","unlisted":false},{"type":"category","label":"Understanding the Laravel Ecosystem","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"MVC Pattern","href":"/Laravel-in-Action/docs/Understanding-the-Laravel-Ecosystem/MVC-Pattern","docId":"Understanding-the-Laravel-Ecosystem/MVC-Pattern","unlisted":false},{"type":"link","label":"Structure of the Framework","href":"/Laravel-in-Action/docs/Understanding-the-Laravel-Ecosystem/Structure-of-the-Framework","docId":"Understanding-the-Laravel-Ecosystem/Structure-of-the-Framework","unlisted":false},{"type":"link","label":"Request Lifecycle","href":"/Laravel-in-Action/docs/Understanding-the-Laravel-Ecosystem/Request-Lifecycle","docId":"Understanding-the-Laravel-Ecosystem/Request-Lifecycle","unlisted":false},{"type":"link","label":"Service Container","href":"/Laravel-in-Action/docs/Understanding-the-Laravel-Ecosystem/Service-Container","docId":"Understanding-the-Laravel-Ecosystem/Service-Container","unlisted":false},{"type":"link","label":"Laravel Documentation and Community","href":"/Laravel-in-Action/docs/Understanding-the-Laravel-Ecosystem/Laravel-Documentation-and-Community","docId":"Understanding-the-Laravel-Ecosystem/Laravel-Documentation-and-Community","unlisted":false}],"href":"/Laravel-in-Action/docs/category/understanding-the-laravel-ecosystem"},{"type":"category","label":"Laravel Models","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Defining Models","href":"/Laravel-in-Action/docs/Laravel-Models/Defining-Models","docId":"Laravel-Models/Defining-Models","unlisted":false},{"type":"link","label":"Eloquent Relationships","href":"/Laravel-in-Action/docs/Laravel-Models/Eloquent-Relationships","docId":"Laravel-Models/Eloquent-Relationships","unlisted":false},{"type":"link","label":"Querying the Database with Eloquent","href":"/Laravel-in-Action/docs/Laravel-Models/Querying-the-Database-with-Eloquent","docId":"Laravel-Models/Querying-the-Database-with-Eloquent","unlisted":false},{"type":"link","label":"Query Scopes","href":"/Laravel-in-Action/docs/Laravel-Models/Query-Scopes","docId":"Laravel-Models/Query-Scopes","unlisted":false},{"type":"link","label":"Using Eloquent Collections and Serialization","href":"/Laravel-in-Action/docs/Laravel-Models/Using-Eloquent-Collections-and-Serialization","docId":"Laravel-Models/Using-Eloquent-Collections-and-Serialization","unlisted":false},{"type":"link","label":"Database Migrations","href":"/Laravel-in-Action/docs/Laravel-Models/Database-Migrations","docId":"Laravel-Models/Database-Migrations","unlisted":false}],"href":"/Laravel-in-Action/docs/category/laravel-models"},{"type":"link","label":"Laravel Routing","href":"/Laravel-in-Action/docs/Laravel-Routing","docId":"Laravel-Routing","unlisted":false},{"type":"link","label":"Laravel Controllers","href":"/Laravel-in-Action/docs/Laravel-Controllers","docId":"Laravel-Controllers","unlisted":false},{"type":"category","label":"Laravel Views","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What are Templates?","href":"/Laravel-in-Action/docs/Laravel-Views/What-are-Templates","docId":"Laravel-Views/What-are-Templates","unlisted":false},{"type":"link","label":"Blade Directives","href":"/Laravel-in-Action/docs/Laravel-Views/Blade-Directives","docId":"Laravel-Views/Blade-Directives","unlisted":false},{"type":"link","label":"Example of a Laravel Blade Template","href":"/Laravel-in-Action/docs/Laravel-Views/Example-of-a-Laravel-Blade-Template","docId":"Laravel-Views/Example-of-a-Laravel-Blade-Template","unlisted":false},{"type":"link","label":"Laravel Blade Layouts","href":"/Laravel-in-Action/docs/Laravel-Views/Laravel-Blade-Layouts","docId":"Laravel-Views/Laravel-Blade-Layouts","unlisted":false},{"type":"link","label":"Reference Guide: Blade Directives","href":"/Laravel-in-Action/docs/Laravel-Views/Reference-Guide","docId":"Laravel-Views/Reference-Guide","unlisted":false},{"type":"link","label":"Using Public Assets in Laravel","href":"/Laravel-in-Action/docs/Laravel-Views/Using-Public-Assets","docId":"Laravel-Views/Using-Public-Assets","unlisted":false}],"href":"/Laravel-in-Action/docs/category/laravel-views"},{"type":"category","label":"Building APIs with Laravel","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction to API Development","href":"/Laravel-in-Action/docs/Building-APIs-with-Laravel/Introduction-to-API-Development","docId":"Building-APIs-with-Laravel/Introduction-to-API-Development","unlisted":false},{"type":"link","label":"Building RESTful APIs with Laravel","href":"/Laravel-in-Action/docs/Building-APIs-with-Laravel/Building-RESTful-APIs-with-Laravel","docId":"Building-APIs-with-Laravel/Building-RESTful-APIs-with-Laravel","unlisted":false},{"type":"link","label":"API Authentication and Security","href":"/Laravel-in-Action/docs/Building-APIs-with-Laravel/API-Authentication-and-Security","docId":"Building-APIs-with-Laravel/API-Authentication-and-Security","unlisted":false},{"type":"link","label":"Handling API Errors and Exceptions","href":"/Laravel-in-Action/docs/Building-APIs-with-Laravel/Handling-API-Errors-and-Exceptions","docId":"Building-APIs-with-Laravel/Handling-API-Errors-and-Exceptions","unlisted":false}],"href":"/Laravel-in-Action/docs/category/building-apis-with-laravel"},{"type":"link","label":"Deploying a Laravel Application on AWS EC2 using Laravel Sail with Docker","href":"/Laravel-in-Action/docs/Deploying-Laravel","docId":"Deploying-Laravel","unlisted":false}]},"docs":{"Building-APIs-with-Laravel/API-Authentication-and-Security":{"id":"Building-APIs-with-Laravel/API-Authentication-and-Security","title":"API Authentication and Security","description":"API authentication and security are critical aspects of building secure and reliable APIs. In this guide, we\'ll explore various authentication methods and security best practices for securing your Laravel APIs.","sidebar":"tutorialSidebar"},"Building-APIs-with-Laravel/Building-RESTful-APIs-with-Laravel":{"id":"Building-APIs-with-Laravel/Building-RESTful-APIs-with-Laravel","title":"Building RESTful APIs with Laravel","description":"RESTful APIs are a popular approach for designing web APIs that follow the principles of Representational State Transfer (REST) architecture.","sidebar":"tutorialSidebar"},"Building-APIs-with-Laravel/Handling-API-Errors-and-Exceptions":{"id":"Building-APIs-with-Laravel/Handling-API-Errors-and-Exceptions","title":"Handling API Errors and Exceptions","description":"When building APIs, it\'s essential to handle errors and exceptions gracefully to provide a good user experience and ensure the security and reliability of your API.","sidebar":"tutorialSidebar"},"Building-APIs-with-Laravel/Introduction-to-API-Development":{"id":"Building-APIs-with-Laravel/Introduction-to-API-Development","title":"Introduction to API Development","description":"What is an API?","sidebar":"tutorialSidebar"},"Deploying-Laravel":{"id":"Deploying-Laravel","title":"Deploying a Laravel Application on AWS EC2 using Laravel Sail with Docker","description":"Here is a step by step guide to deploy a Laravel application on AWS EC2 using Laravel Sail with Docker. Laravel Sail is a light-weight command-line interface for interacting with Laravel\'s default Docker development environment. It is designed to provide a minimal configuration for Laravel apps that are using Docker.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Welcome to my personal documentation repository for learning Laravel! Let\'s briefly discuss its structure, content and purpose.","sidebar":"tutorialSidebar"},"Laravel-Controllers":{"id":"Laravel-Controllers","title":"Laravel Controllers","description":"Controllers in Laravel are responsible for handling user requests and managing the flow of data in the application. Controllers contain methods, also known as actions, that are invoked when a specific route is accessed. They receive user input, interact with models and services, and return responses to the user. Controllers help separate the logic of an application from the routing layer.","sidebar":"tutorialSidebar"},"Laravel-Models/Database-Migrations":{"id":"Laravel-Models/Database-Migrations","title":"Database Migrations","description":"Creating Migrations","sidebar":"tutorialSidebar"},"Laravel-Models/Defining-Models":{"id":"Laravel-Models/Defining-Models","title":"Defining Models","description":"In Laravel, you define models by creating a class that extends the Illuminate\\\\Database\\\\Eloquent\\\\Model class. Each model is associated with a database table, and by convention, the table name is the pluralized lowercase form of the model name.","sidebar":"tutorialSidebar"},"Laravel-Models/Eloquent-Relationships":{"id":"Laravel-Models/Eloquent-Relationships","title":"Eloquent Relationships","description":"Eloquent relationships define how different models are related to each other. They allow you to define relationships between models and retrieve related data easily. Eloquent provides several types of relationships, including one-to-one, one-to-many, many-to-one, many-to-many, and polymorphic relationships.","sidebar":"tutorialSidebar"},"Laravel-Models/Query-Scopes":{"id":"Laravel-Models/Query-Scopes","title":"Query Scopes","description":"Query scopes are a powerful tool in Eloquent that allows you to define reusable query constraints. Scopes enable you to encapsulate commonly used query conditions into methods, improving code organization and reusability. They help keep your code DRY (Don\u2019t Repeat Yourself ) and make it easier to maintain.","sidebar":"tutorialSidebar"},"Laravel-Models/Querying-the-Database-with-Eloquent":{"id":"Laravel-Models/Querying-the-Database-with-Eloquent","title":"Querying the Database with Eloquent","description":"Retrieving Models","sidebar":"tutorialSidebar"},"Laravel-Models/Using-Eloquent-Collections-and-Serialization":{"id":"Laravel-Models/Using-Eloquent-Collections-and-Serialization","title":"Using Eloquent Collections and Serialization","description":"Eloquent provides powerful features for working with query results as collections and serializing data in various formats. In this section, we will explore how to leverage Eloquent collections and serialization capabilities.","sidebar":"tutorialSidebar"},"Laravel-Routing":{"id":"Laravel-Routing","title":"Laravel Routing","description":"Routing in Laravel refers to defining how incoming HTTP requests should be handled. Routes define the URLs and map them to specific controller actions. For example, you can define a route that maps the /users URL to a UserController\'s index action. Routes provide a clean and expressive way to handle different HTTP methods (GET, POST, PUT, and DELETE) and parameters.","sidebar":"tutorialSidebar"},"Laravel-Views/Blade-Directives":{"id":"Laravel-Views/Blade-Directives","title":"Blade Directives","description":"Blade directives are special commands that allow you to embed PHP code directly into your Blade templates. They provide a convenient way to execute PHP logic and control the template\'s structure.","sidebar":"tutorialSidebar"},"Laravel-Views/Example-of-a-Laravel-Blade-Template":{"id":"Laravel-Views/Example-of-a-Laravel-Blade-Template","title":"Example of a Laravel Blade Template","description":"Let\'s go through an example of creating a Laravel Blade template. We\'ll create a template that displays user information using variables, loops, conditionals, and filters.","sidebar":"tutorialSidebar"},"Laravel-Views/Laravel-Blade-Layouts":{"id":"Laravel-Views/Laravel-Blade-Layouts","title":"Laravel Blade Layouts","description":"Laravel\'s Blade templating engine also provides a concept of layouts that allow you to define a common structure for your views and reuse them across multiple pages.","sidebar":"tutorialSidebar"},"Laravel-Views/Reference-Guide":{"id":"Laravel-Views/Reference-Guide","title":"Reference Guide: Blade Directives","description":"| Directive                | Use Case                                                                                           |","sidebar":"tutorialSidebar"},"Laravel-Views/Using-Public-Assets":{"id":"Laravel-Views/Using-Public-Assets","title":"Using Public Assets in Laravel","description":"In Laravel, serving static assets like images, CSS, and JavaScript files is straightforward. Laravel provides a dedicated public directory that you can use to store your public assets.","sidebar":"tutorialSidebar"},"Laravel-Views/What-are-Templates":{"id":"Laravel-Views/What-are-Templates","title":"What are Templates?","description":"Imagine you\'re building a social media website with multiple user profiles. Instead of creating a separate webpage for each user, you can create a generic template with placeholders for dynamic content. This template can be used to serve different profiles by replacing placeholders with actual user data.","sidebar":"tutorialSidebar"},"Overview":{"id":"Overview","title":"Overview of Laravel","description":"Meet Laravel","sidebar":"tutorialSidebar"},"Understanding-the-Laravel-Ecosystem/Laravel-Documentation-and-Community":{"id":"Understanding-the-Laravel-Ecosystem/Laravel-Documentation-and-Community","title":"Laravel Documentation and Community","description":"Laravel has extensive and well-documented resources available online, including official documentation, tutorials, and forums. My personal recommended resources are:","sidebar":"tutorialSidebar"},"Understanding-the-Laravel-Ecosystem/MVC-Pattern":{"id":"Understanding-the-Laravel-Ecosystem/MVC-Pattern","title":"MVC Pattern","description":"Laravel follows the Model-View-Controller (MVC) architecture,  Here\'s an overview of how Laravel\'s MVC architecture is structured:","sidebar":"tutorialSidebar"},"Understanding-the-Laravel-Ecosystem/Request-Lifecycle":{"id":"Understanding-the-Laravel-Ecosystem/Request-Lifecycle","title":"Request Lifecycle","description":"When a request is made to a Laravel application, it goes through a series of steps known as the request lifecycle. Understanding the request lifecycle is crucial for building and debugging applications effectively. In this document, we\'ll explore the various stages of the request lifecycle in Laravel.","sidebar":"tutorialSidebar"},"Understanding-the-Laravel-Ecosystem/Service-Container":{"id":"Understanding-the-Laravel-Ecosystem/Service-Container","title":"Service Container","description":"The foundation of the Laravel framework is its powerful Service Container. To truly understand the framework, a strong grasp of the container is necessary. However, we should note that an Service Container is simply a convenience mechanism for achieving a software design pattern: Dependency Injection. A container is not necessary to perform dependency injection, it simply makes the task easier.","sidebar":"tutorialSidebar"},"Understanding-the-Laravel-Ecosystem/Structure-of-the-Framework":{"id":"Understanding-the-Laravel-Ecosystem/Structure-of-the-Framework","title":"Structure of the Framework","description":"- The app directory contains the core application code, including console commands, exception handlers, HTTP-related classes (controllers, middleware, requests, and resources), and models.","sidebar":"tutorialSidebar"}}}')}}]);